from __future__ import unicode_literals
from faker.providers.phone_number import Provider as PhoneProvider


class Provider(PhoneProvider):
    area_codes = (
        '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214',
        '215', '216', '217', '218', '219', '224', '225', '226', '228', '229', '231', '234', '236', '239',
        '240', '246', '248', '249', '250', '251', '252', '253', '254', '256', '260', '262', '267', '268',
        '269', '270', '272', '276', '281', '289', '301', '302', '303', '304', '305', '306', '307', '308',
        '309', '310', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '323', '325',
        '330', '331', '334', '336', '337', '339', '343', '347', '351', '352', '360', '361', '365', '385',
        '386', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '412', '413', '414',
        '415', '416', '417', '418', '419', '423', '424', '425', '430', '431', '432', '434', '435', '437',
        '438', '440', '442', '443', '445', '450', '458', '469', '470', '475', '478', '479', '480', '484',
        '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '512', '513', '514', '515',
        '516', '517', '518', '519', '520', '530', '531', '534', '539', '540', '541', '551', '559',
        '561', '562', '563', '567', '570', '571', '573', '574', '575', '579', '580', '581', '585', '586',
        '587', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '612', '613',
        '614', '615', '616', '617', '618', '619', '620', '623', '626', '630', '631', '636', '641', '646',
        '647', '650', '651', '657', '660', '661', '662', '667', '669', '678', '681', '682', '701', '702',
        '703', '704', '705', '706', '707', '708', '709', '710', '712', '713', '714', '715', '716', '717',
        '718', '719', '720', '724', '727', '731', '732', '734', '737', '740', '747', '754', '757', '760',
        '762', '763', '765', '769', '770', '772', '773', '774', '775', '778', '779', '780', '781', '785',
        '786', '787', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '812', '813',
        '814', '815', '816', '817', '818', '819', '828', '829', '830', '831', '832', '843', '845', '847',
        '848', '849', '850', '856', '857', '858', '859', '860', '862', '863', '864', '865', '867', '870',
        '872', '876', '878', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910',
        '912', '913', '914', '915', '916', '917', '918', '919', '920', '925', '928', '929', '931', '936',
        '937', '938', '939', '940', '941', '947', '949', '951', '952', '954', '956', '970', '971', '972',
        '973', '975', '978', '979', '980', '984', '985', '989', '404', '770', '905', '289'
    )

    invalid_codes = (
        '227', '242', '264', '274', '284', '311', '340', '345', '346', '364', '411', '441', '447', '456',
        '464', '473', '500', '511', '521', '522', '523', '529', '532', '533', '538', '542', '543', '544',
        '545', '547', '548', '549', '552', '554', '556', '564', '566', '569', '577', '578', '588', '589', '611',
        '628', '629', '649', '659', '664', '670', '671', '672', '679', '684', '700', '711', '721', '725',
        '730', '758', '767', '782', '784', '811', '825', '868', '869', '911', '930', '935', '959'
    )

    formats = (
        '+1{{area_code}}{{central_office_code}}####',
        '+1-{{area_code}}-{{central_office_code}}-####',
        '{{area_code}}-{{central_office_code}}-####',
        '({{area_code}}){{central_office_code}}-####',
        '1-{{area_code}}-{{central_office_code}}-####',
        '{{area_code}}.{{central_office_code}}.####',
        '{{area_code}}-{{central_office_code}}-####',
        '({{area_code}}){{central_office_code}}-####',
        '1-{{area_code}}-{{central_office_code}}-####',
        '1.{{area_code}}.{{central_office_code}}.####',
        '{{area_code}} {{central_office_code}} ####'
    )

    @classmethod
    def area_code(cls):
        """Returns a valid U.S. area code."""
        #Allowed ranges: 2-9 for the first digit, and 0-9 for the second and third digits.
        return cls.random_element(cls.area_codes)

    @classmethod
    def central_office_code(cls):
        """Returns a valid U.S. central office code."""
        #Allowed ranges: 2-9 for the first digit, and 0-9 for both the second and third digits.
        #Must not include 11
        central_office_code = str(cls.random_int(200, 999))
        while '11' in central_office_code:
            central_office_code = str(cls.random_int(200, 999))
        return central_office_code

    def phone_number(self):
        """Returns valid United States phone number as a string."""
        return self.generator.parse(self.numerify(self.random_element(self.formats)))